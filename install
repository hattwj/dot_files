#!/usr/bin/env ruby

# Recursively symlinks files in a dot_files repository to the home directory
# and creates backups of any files that would be replaced. Directories are created
# if they are missing. Supports an optional parameter to rename target files that
# match a pattern.

require 'optparse'
require 'fileutils'
require 'json'
require 'logger'

# Flag to prevent actually symlinking or renaming files
$no_op = false

def backups_dir
  "#{ENV['HOME']}/.config/dot_files/backups/#{File.basename(git_root)}"
end

# Find the git root directory or raise an exception if not a git repository
def git_root
  git_dir = `git rev-parse --show-toplevel`.strip
  raise "Error: not a git repository" if git_dir.empty?

  git_dir
end

def parse_args(args)
  # Define CLI options and parse them
  options = {
    action: :run_installer,
    config_path: "#{git_root}/installer.json",
    no_op: false
  }

  OptionParser.new(args) do |opts|
    opts.banner = <<-DOC
  Usage: #{File.basename(__FILE__)} [options]
  Symlink dotfiles from the current git repository to the home directory"

  Config file variables: A "{{ variable_name }}" string in the config file that can be replaced at runtime.
    {{ home }}     - Home directory of the current user.
    {{ git_root }} - Git root of the current folder.

  Options:
DOC

    opts.on("-c", "--config PATH", "Specify a config file for installation details") do |p|
      options[:config_path] = p
    end

    opts.on("-n", "--no-op", "") do
      options[:no_op] = true
    end

    opts.on("-l", "--ls", "List extra available packages") do
      options[:action] = :ls_packages
    end

    opts.on("--init", "Print out a sample config file") do
      options[:action] = :init
    end

    opts.on_tail("-h", "--help", "Show this message") do
      puts opts
      exit
    end
  end.parse!
  options
end

class Hash
  def fetch_slice(*keys)
    result = {}
    keys.each do |key|
      result[key] = self.fetch(key)
    end
    result
  end
end

# Define CLI colorization config
class String
  def colorize(color_code)
    "\e[#{color_code}m#{self}\e[0m"
  end

  def red
    colorize(31)
  end

  def green
    colorize(32)
  end

  def yellow
    colorize(33)
  end

  def blue
    colorize(34)
  end
end

def log_no_op(msg)
  logger.info "[#{'no_op'.green}] #{msg}"
end

def log_exec(msg)
  logger.info "[#{'exec'.blue}] #{msg}"
end

def log_delete(msg)
  logger.info "[#{'delete'.red}] #{msg}"
end

def log_error(msg)
  logger.error "[#{'Error'.red}] #{msg}"
end

def log_backup(msg)
  logger.info "[#{'backup'.yellow}] #{msg}"
end

def log_symlink(msg)
  logger.info "[#{'symlink'.blue}] #{msg}"
end

def log_exclude(msg)
  logger.info "[#{"exclude".yellow}] #{msg}"
end

def logger
  @logger
end

def init_logger
  if $no_op
    init_stdout_logger
  else
    init_file_logger("#{ENV['HOME']}/.config/dot_files/logs/installer-#{File.basename(git_root)}.log")
  end
end

def init_stdout_logger
  @logger = Logger.new(STDOUT)
  @logger.formatter = proc do |severity, datetime, progname, msg|
    puts msg
    nil
  end
end

def init_file_logger(log_file_path)
  FileUtils.mkdir_p(File.dirname(log_file_path))
  @logger = Logger.new(log_file_path)
  original_formatter = Logger::Formatter.new
  @logger.formatter = proc do |severity, datetime, progname, msg|
    puts msg
    msg_without_ascii =  msg.gsub(/\e\[([;\d]+)?m/, '')
    result = original_formatter.call(severity, datetime, progname, msg_without_ascii.dump)
    result
  end
end

# Define a method to recursively symlink files from the source to target directory
def symlink_files(src:, dest:, exclude: [], dir_only: [])
  Dir.foreach(src) do |filename|
    next if filename == '.' || filename == '..'

    source_path = File.join(src, filename)

    if exclude.include?(source_path)
      log_exclude source_path
      next
    end

    target_path = File.join(dest, filename)

    if File.symlink?(target_path) && File.readlink(target_path) != source_path
      log_delete("unlink #{target_path}")
      File.delete(target_path) unless $no_op
    end

    if File.directory?(source_path)
      if dir_only.include?(source_path)
        symlink_path(src: source_path, dest: target_path)
        next
      end

      # If the filename is a directory, create it if it doesn't exist, in the target directory
      unless File.exists?(target_path)
        log_create(target_path)
        FileUtils.mkdir_p(target_path) unless $no_op
      end
      # Recursively symlink its contents
      symlink_files(src: source_path, dest: target_path, exclude: exclude, dir_only: dir_only)
    else
      symlink_path(src: source_path, dest: target_path)
    end
  end
end

def symlink_path(src:, dest:)
  raise "Invalid src: #{src.inspect} does not contain #{git_root.inspect}" unless src.include?(git_root)

  backup_path = src.sub(git_root, backups_dir)

  # Source file missing?
  if !File.exists?(src)
    puts "[#{"Missing".red }] #{src}"
    exit 1
  end

  # Broken symlink?
  if !File.exists?(dest) && File.symlink?(dest)
    log_delete("Broken symlink #{dest}")
    File.delete(dest) unless $no_op
  end

  if File.exists?(dest)
    if !File.symlink?(dest)
      log_backup "#{dest} to #{backup_path}"
      FileUtils.mkdir_p(File.dirname(backup_path))
      File.rename(dest, backup_path) unless $no_op
    else
      if File.readlink(dest) != src
        # If the target file is a symlink, delete it so it can be replaced
        log_delete("symlink #{dest}")
        File.delete(dest) unless $no_op
      else
        log_no_op("symlink #{src} to #{dest}")
        return
      end
    end
  end
  # Create a symlink to the source file in the target directory
  log_symlink "#{src} to #{dest}"
  File.symlink(src, dest) unless $no_op
end

def main(args)
  opts = parse_args(args)
  $no_op = opts.fetch(:no_op)

  begin
    # Check if the current directory is a Git repository
    git_root
  rescue StandardError => e
    log_error(e.message)
    exit 1
  end

  if opts[:action] == :init
    generate_init_config
    exit 0
  end

  unless File.exists?(opts[:config_path])
    log_error("Config file not found: #{opts[:config_path]}")
    exit 1
  end

  init_logger

  # Case insensitive variables
  config_data = File
    .read(opts[:config_path])
    .gsub(/{{\s*git_root\s*}}/i, git_root)
    .gsub(/{{\s*home\s*}}/i, ENV['HOME'])

  if config_data.include?('}}') || config_data.include?('{{')
    log_error("Malformed config file, it looks like some variables are not substituted: IE {{_VAR_}}")
    exit 1
  end

  config = JSON.parse(config_data, symbolize_names: true)

  unless File.exist?(backups_dir)
    log_create(backups_dir)
    FileUtils.mkdir_p(backups_dir) unless $no_op
  end

  case opts.fetch(:action)
  when :run_installer
    run_installer(config)
  when :list_packages
    list_packages(config)
  end
end

def generate_init_config
  puts File.read("#{__dir__}/installer.json")
end

def run_installer(config)
  Array(config[:symlink_recursive]).each do |symlink_opts|
    name = symlink_opts[:name] || symlink_opts[:src]
    symlink_opts[:exclude] = symlink_opts[:exclude] || []
    symlink_opts[:dir_only] = symlink_opts[:dir_only] || []
    logger.info "\nLinking #{name}"

    # Call the method to symlink all files from the source to target directory
    symlink_files(**symlink_opts.fetch_slice(:src, :dest, :exclude, :dir_only))
  end

  Array(config[:symlinks]).each do |symlink_opts|
    name = symlink_opts[:name] || symlink_opts[:src]
    logger.info "\nLinking #{name}"

    # Call the method to symlink all files from the source to target directory
    symlink_path(**symlink_opts.fetch_slice(:src, :dest))
  end

  if !Array(config[:exec]).empty?
    logger.info "\nRunning commands:"
  end
  Array(config[:exec]).each do |command|
    if $no_op
      log_no_op command
    else
      log_exec `#{command}`
    end
  end
end

def list_files(config)
  Dir.foreach(src) do |filename|
    next if filename == '.' || filename == '..'

    if File.directory?(filename)
    end
  end
end

if $PROGRAM_NAME == __FILE__
  trap "SIGINT" do
    puts "Exiting..."
    exit 130
  end
  main(ARGV)
end
