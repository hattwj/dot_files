#!/bin/bash

# Echo parameter and log it to file
function echolog()
{
	echo $1
	echo $1 >> $LOG_FILE
}

git submodule update --init --recursive

#get cur dir
OLD_DIR="$(pwd)"

# Find directory that this script is in
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Create log file name
LOG_FILE="$SCRIPT_DIR/install.log"

# what bash files will this computer use?
pf1=".bashrc_"`uname`
pf2=".bashrc_"`uname`'_'`hostname`
pf3="$HOME/.bash_custom"

if [ ! -f "$pf3" ]; then
    touch $pf3
    echo "[created]    $pf3"
fi

# create home bin dir
if [ ! -d "$HOME/backups" ]; then
   echo "[created]    $HOME/bin"
   mkdir "$HOME/bin"
   chmod go-w "$HOME/bin"
fi

# create backup dir
if [ ! -d "$SCRIPT_DIR/backups" ]; then
    echo "[created]    $SCRIPT_DIR/backups"
    mkdir "$SCRIPT_DIR/backups"
fi

# Check and remove old log file (if exists)
if [ -f "$SCRIPT_DIR/install.log"  ]; then
    echo "[deleted] $LOG_FILE"
    rm -f "$LOG_FILE"
fi

# Create ~/bin directory if it does not exist
if [ ! -d "$HOME/bin" ]; then
    echolog "[created]    $HOME/bin"
    mkdir $HOME/bin
fi

echo "Symlinking scripts to $HOME/bin"

SCRIPTS=$SCRIPT_DIR/scripts/*
for f in $SCRIPTS
do
  fname="$(basename -- $f)"
  # take action on each file. $f store current file name
  [ ! -f "$HOME/bin/$fname" ] && \
    ln -sf $f $HOME/bin/$fname && \
    echolog "[created]    $HOME/bin/$fname"
done

# Create .config directory if it does not exist
if [ ! -d "$HOME/.config" ]; then
    echolog "[created]    $HOME/.config"
    mkdir $HOME/.config
fi

# create backups and generate symlinks
declare -a dir_arr=('.vim' '.config/terminator')
for dir in "${dir_arr[@]}"
do
    # Save directory if it is not a symlink
    if [ ! -L "$HOME/$dir" ] && [ -d "$HOME/$dir" ]; then
        echolog "[backup]    $HOME/$dir --> $SCRIPT_DIR/backups"
        cp -R "$HOME/$dir" "$SCRIPT_DIR/backups"
    fi

    # Delete directory/symlink
    if [ -d "$SCRIPT_DIR/$dir" ] && [ -d "$HOME/$dir" ]; then
        echolog "[deleted]    $HOME/$dir"
        rm -rf "$HOME/$dir"
    fi

    # Create link to new directory
    if [ -d "$SCRIPT_DIR/$dir" ]; then
        echolog "[linked]    $SCRIPT_DIR/$dir  -->  $HOME/$dir"
        ln -s $SCRIPT_DIR/$dir "$HOME/$dir"
    fi
done

declare -a file_arr=('.ackrc' '.tmux.conf' '.bash_aliases' \
    '.bash_profile' '.gitconfig' \
    '.pryrc' '.irbrc' \
    '.bashrc' '.inputrc' '.psqlrc' '.vimrc' '.gdbinit' \
    "$pf1" "$pf2")
for file in "${file_arr[@]}"
do
    # See if file exists in dot_files
    if [ ! -f "$SCRIPT_DIR/$file" ]; then
        echolog "[missing] $file"
        continue
    fi

    # Save file if not a link
    if  [ -f "$HOME/$file" ] || [ ! -L "$HOME/$file" ] ; then
        echolog "[backup]   $HOME/$file --> $SCRIPT_DIR/backups"
        cp "$HOME/$file" "$SCRIPT_DIR/backups"
    fi

    # Delete original file
    if  [ -f "$HOME/$file" ] || [ -L "$HOME/$file" ] ; then
        echolog "[deleted]   $HOME/$file"
        rm -f "$HOME/$file"
    fi

    # Link new file
    echolog "[linked]    $SCRIPT_DIR/$file --> $HOME/$file"
    ln -s "$SCRIPT_DIR/$file" "$HOME/$file"

done

# Parse command line options
if [[ "$@" == "--extras" ]]
then
    $SCRIPT_DIR/install_extras
fi

cd $OLD_DIR
