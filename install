#!/bin/bash

# Echo parameter and log it to file
function echoLog() {
  if [ -z "$NO_OP" ]; then
    echo -e $1
    echo [$(date)] $1 >> $LOG_FILE
  else
    echo -e [no-op] $1
  fi
}

function backupAndLinkFiles() {
  DEST="$1"
  shift

  file_arr=("$@")
  for SRC_FILE in "${file_arr[@]}"
  do
    DEST_FILE="$DEST/$(basename $SRC_FILE)"

    # See if file exists in dot_files
    if [ ! -f "$SRC_FILE" ]; then
      echoLog "[source missing] $SRC_FILE"
      continue
    fi

    # Save file if not a link
    if  [ -f "$DEST_FILE" ] && [ ! -L "$DEST_FILE" ] ; then
      echoLog "[backup]   $DEST_FILE --> $SCRIPT_DIR/backups"
      [ -z "$NO_OP" ] && cp "$DEST_FILE" "$SCRIPT_DIR/backups"
    fi

    # Delete original file
    if  [ -f "$DEST_FILE" ] || [ -L "$DEST_FILE" ] ; then
      echoLog "[deleted]   $DEST_FILE"
      [ -z "$NO_OP" ] && rm -f "$DEST_FILE"
    fi

    # Link new file
    echoLog "[linked]    $SRC_FILE --> $DEST_FILE"
    [ -z "$NO_OP" ] && ln -s "$SRC_FILE" "$DEST_FILE"
  done
}

function backupAndLinkDirs() {
  DEST="$1"
  shift

  dir_arr=("$@")
  for SRC_DIR in "${dir_arr[@]}"
  do
    DEST_DIR="$DEST/$(basename $SRC_DIR)"

    # See if file exists in dot_files
    if [ ! -d "$SRC_DIR" ]; then
      echoLog "[source missing] $SRC_DIR"
      continue
    fi

    # Save directory if it is not a symlink
    if [ ! -L "$DEST_DIR" ] && [ -d "$DEST_DIR" ]; then
      echoLog "[backup]    $DEST_DIR --> $SCRIPT_DIR/backups"
      [ -z "$NO_OP" ] && cp -R "$DEST_DIR" "$SCRIPT_DIR/backups"
    fi

    # Delete directory/symlink
    if [ -d "$SRC_DIR" ] && [ -d "$DEST_DIR" ]; then
      echoLog "[deleted]    $DEST_DIR"
      [ -z "$NO_OP" ] && rm -rf "$DEST_DIR"
    fi

    # Create link to new directory
    if [ -d "$SRC_DIR" ]; then
      echoLog "[linked]    $SRC_DIR  -->  $DEST_DIR"
      [ -z "$NO_OP" ] && ln -s $SRC_DIR "$DEST_DIR"
    fi
  done
}

#get cur dir
OLD_DIR="$(pwd)"

# Find directory that this script is in
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
CONFIGS_DIR="$SCRIPT_DIR/configs"
BINS_DIR="$SCRIPT_DIR/bin"

# Create log file name
LOG_FILE="$SCRIPT_DIR/install.log"

# what bash files will this computer use?
pf1=".bashrc_"`uname`
pf2=".bashrc_"`uname`'_'`hostname`
pf3="$HOME/.bash_custom"

if [ ! -f "$pf3" ]; then
  [ -z "$NO_OP" ] && touch $pf3
  echo "[created]    $pf3"
fi

# create home bin dir
if [ ! -d "$HOME/bin" ]; then
  echo "[created]    $HOME/bin"
  [ -z "$NO_OP" ] && mkdir "$HOME/bin"
  [ -z "$NO_OP" ] && chmod go-w "$HOME/bin"
fi

# create backup dir
if [ ! -d "$SCRIPT_DIR/backups" ]; then
  echo "[created]    $SCRIPT_DIR/backups"
  [ -z "$NO_OP" ] && mkdir "$SCRIPT_DIR/backups"
fi

echo
declare -a scripts=($(ls -fAd $BINS_DIR/*))
echo -e "\nLinking scripts:"
backupAndLinkFiles "$HOME/bin" "${scripts[@]}"

# Create .config directory if it does not exist
if [ ! -d "$HOME/.config" ]; then
  echoLog "[created]    $HOME/.config"
  [ -z "$NO_OP" ] && mkdir $HOME/.config
fi

# create backups and generate symlinks
# Not ready:
# ls -Ad $CONFIGS_DIR/.??*/
echo -e "\nLinking config directories:"
declare -a dir_arr=("$CONFIGS_DIR/.vim" "$CONFIGS_DIR/.config/terminator")
backupAndLinkDirs "$HOME" "${dir_arr[@]}"

echo -e "\nLinking dot files:"
# -f only files, -A show hidden; except . and .., -d give full path of file
declare -a file_arr=($(find $CONFIGS_DIR -maxdepth 1 -type f))
backupAndLinkFiles "$HOME" "${file_arr[@]}"

cd $OLD_DIR
