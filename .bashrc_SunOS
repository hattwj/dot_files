# http://www.jmglov.net/unix/bash.html
# last modified - wjh 09/09/2011
# Version: 1.1.5

# This script *must not* generate any output, as this will break non-
# interactive shells!

# Color bash for Solaris
TERM=xtermc

# Source .bashrc for non-interactive Bash shells
export BASH_ENV=~/.bashrc_SunOs

# List of all aliases goes here
#alias exec='/data/scripts/exec'
alias ls='/data/utils/bin/ls --color=auto'
alias ll='ls -alF'
alias grep='grep --color=auto'
alias sudo='/home/devel/GNU/bin/sudo'
alias svn='/home/devel/GNU/bin/svn'
alias psql='TERM=vt100 psql'

# Standard Oracle installation directory
#if [ -d /data/oracle ]; then
#  export ORACLE_HOME=/data/oracle
#fi


# If you find yourself hampered by stoopid aliases, uncomment this
#unalias -a

# Default to the worst-case editor and pager
export EDITOR=vi
export PAGER=/usr/bin/less

# If we have a better editor or pager, use it (change these as you see fit)
my_editor=vim
my_pager=/usr/local/bin/less

type $my_editor >/dev/null 2>&1 && export EDITOR=$my_editor
type $my_pager >/dev/null 2>&1 && export PAGER=$my_pager

# Proxy settings (uncomment these and add your proxy if needed)
#export http_proxy='http://proxyhost.somewhere.com:8080'
#export ftp_proxy='http://proxyhost.somewhere.com:8080'
#export RSYNC_PROXY='proxyhost.somewhere.com:8080'

# Prompt should look like: juser@somewhere$
export PS1='[\u@\h:`pwd`]$ '
export PS2=' $ '

# Grab our REALNAME from nsswitch
export REALNAME=`getent passwd $USER | awk -F: '{ print $5 }' 2>/dev/null`

# If you use CVS, uncomment these and change the CVSROOT variable to
# reflect your CVS repository
#export CVS_RSH=ssh
#export CVSROOT=cvshost:/path/to/cvsroot

# If you use Subversion, uncomment these and change them to reflect your
# Subversion protocol and root. The example below assumes that your
# Subversion root is a local directory, /var/svnroot. For a remote root,
# you might set SVNPROTO to "svn+ssh://" and SVNROOT to
# "svn.mydomain.tld/var/svnroot".
#export SVNPROTO=file://
#export SVNROOT=/var/svnroot

# If you are a developer, uncomment the following to make sure core dumps
# will be generated when they should be
#ulimit -c unlimited

# Let me know about new mail in these folders
export MAILPATH=/var/spool/mail/$USER"?You've got mail"'!'

# xterm title settings
case $TERM in

  xterm*|rxvt|Eterm|eterm)

    PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD}\007"'

    export PROMPT_COMMAND
    ;;

  screen)

    PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\033\\"'
    export PROMPT_COMMAND
    ;;

esac

# Correct minor spelling errors in cd commands
shopt -s cdspell

# Do *not* append the following to our history: consecutive duplicate
# commands, ls, bg and fg, and exit
# Don't keep useless history commands. Note the last pattern is to not
# keep dangerous commands in the history file.  Who really needs to
# repeat the shutdown(8) command accidentally from your command
# history?
HISTIGNORE='\&:fg:bg:ls:pwd:cd ..:cd ~-:cd -:cd:jobs:set -x:ls -l:ls -l'
HISTIGNORE=${HISTIGNORE}':%1:%2:popd:top:pine:mutt:shutdown*'
export HISTIGNORE

# Save multi-line commands in history as single line
shopt -s cmdhist

# Disk is cheap. Memory is cheap. My memory isn't! Keep a lot of
# history by default. 10K lines seems to go back about 6 months, and
# captures all of the wacky one-off shell scripts that I might want
# again later.
export HISTSIZE=10000
export HISTFILESIZE=${HISTSIZE}

# Reduce redundancy in the history file
export HISTCONTROL=ignoredups

# Do not delete your precious history file before writing the new one
shopt -s histappend

# This is useful for embedded newlines in commands and quoted arguments
shopt -s lithist

# Enable egrep-style pattern matching
shopt -s extglob

# This option mostly keeps you from needing to run "hash -r" when you
# modify directories in your path
shopt -s checkhash

# Set umask
umask 0023

# Uncomment this if you are a vi user and hate Bash's Emacs keybindings
#set -o vi

# Enable programmable completion. Set $bc_safe to the full path of the
# wrapper script distributed with the bash-completion package
# that checks to make sure your version of Bash is new enough before
# enabling programmable completion (the default will probably suffice).
bc_safe=/etc/profile.d/bash-completion
if [ -f $bc_safe ]; then source $bc_safe; fi

# If you want group- and host-specific profiles, uncomment this
#if [ -f .bashrc_net ]; then source .bashrc_net; fi

