#!/usr/bin/env ruby

require 'optparse'
require 'pp'
require 'shellwords'
# require 'mkmf'
require 'ostruct'
require 'open3'

# require 'pry'

# Configure mkmf so that is does not create logfiles or print path checks
# module MakeMakefile::Logging
#   @logfile = File::NULL
#   @quiet = true
# end

# CLI colorization config
class String
  # colorization
  def colorize(color_code)
    "\e[#{color_code}m#{self}\e[0m"
  end

  def red
    colorize(31)
  end

  def green
    colorize(32)
  end

  def yellow
    colorize(33)
  end
end

# This hash will hold all of the options
# parsed from the command-line by
# OptionParser.
DEFAULT_CONFIG = {
  auto: false,
  pattern: nil,
  path: nil,
  replace: nil,
  confirm: true,
  cmd: nil,
  file_types: []
}.freeze

def parse_args(args)
  options = OpenStruct.new(DEFAULT_CONFIG)

  # Auto expand ack --lang options
  args = args.map do |val|
    next val unless val.start_with?('--')
    next val if ['--replace'].include?(val)

    ['-f', val[2..-1]]
  end.flatten

  optparse = OptionParser.new do |opts|
    opts.banner = <<-DOC
  ackrep [FILE-TYPE] [OPTIONS] PATTERN [PATH]

  Example:
    ackrep --js foo -r bar -c
DOC

    # This displays the help screen, all programs are
    # assumed to have this option.
    opts.on('-h', '--help', 'Display this screen') do
      puts opts
      exit 0
    end

    opts.on('-r', '--replace val', 'Value to replace matches with') do |val|
      options.replace = val
      options.auto = true
    end

    opts.on('-a', 'Automatically perform replacement') do
      options.confirm = false
    end

    opts.on('-f file_type', 'Only match against a specific file type') do |val|
      options.file_types << val
    end
  end

  # Parse the command-line.
  optparse.parse!(args)
  options.path = args[1] || '.'

  # remove quotes if present
  options.pattern = args[0].to_s
  options.cmd = get_search_cmd

  options
end

def get_search_cmd
  cmd = 'ag' #find_executable('ag')
  #cmd ||= find_executable('ack')

  unless cmd
    raise 'either "ag" or "ack" must be installed in order to use this tool'
  end

  cmd
end

def demo_command(options)
  # Print command that will carry out changes
  puts <<-DOC

Re-run the command with "-r PATTERN -c" to replace the matching values and
confirm each change. Using a '-a' instead of '-c' will make the process automatic.

You can also do this yourself with a command that looks like this:
#{options.cmd} -Q --print0 -l \"#{options.pattern.shellescape}\" #{options.path} | xargs -0 sed -i "s/#{options.pattern.shellescape}/#{options.replace}/g"
DOC
end

def user_accepts(options)
  return true unless options.confirm

  response = nil
  loop do
    puts 'Replace? y/n'
    response = STDIN.gets.chomp.downcase
    unless %w[y n].include?(response)
      puts "#{response} is not an option, try again or Ctrl-C to abort"
      next
    end
    break
  end
  response == 'y'
end

def auto_command(files, options)
  max = files.count
  files.each_with_index do |file, idx|
    cmd_matches = [options.cmd, '-A4', '-B4', '-m', '1', '-Q', options.pattern]
    options.file_types.each { |val| cmd_matches << "--#{val}" }
    cmd_matches << file

    puts "#{file}: match #{idx} of #{max}"
    matches, _status = Open3.capture2(*cmd_matches)

    puts "\nBefore:"
    puts matches.gsub(options.pattern, options.pattern.red)

    puts "\nAfter: "
    puts matches.gsub(options.pattern, options.replace.green)

    if user_accepts(options)
      text = File.read(file)
      File.write(file, text.gsub(options.pattern, options.replace))
    else
      puts "Skipping #{file}...\n\n".yellow
    end
  end
end

##
# Return an array of files that match the search terms
def get_matching_files(options)
  cmd = [options.cmd, '-l', '-Q',]
  cmd << '--ackmate' if options.cmd.end_with?('ag')
  options.file_types.each { |val| cmd << "--#{val}" }
  cmd << options.pattern
  cmd << options.path

  puts cmd.join(' ')
  files, status = Open3.capture2(*cmd)
  files = files[1..-1].to_s.gsub("\n:", "\n").split("\n")

  if files.empty?
    STDERR.puts "Nothing matched pattern: '#{options.pattern.red}'"
    exit 0
  elsif !status.success?
    exit_code = $?.to_i
    STDERR.puts "Non zero exit code (#{exit_code}) for #{cmd.join(' ').inspect}"
    exit exit_code
  else
    puts "Files contianing text from pattern: '#{options.pattern.green}'"
    puts files.join("\n").green
  end
  files
end

def main(args)
  options = parse_args(args)
  options.replace ||= options.pattern
  files = get_matching_files(options)
  if options.auto
    auto_command(files, options)
  else
    demo_command(options)
  end
end

if $PROGRAM_NAME == __FILE__
  trap "SIGINT" do
    puts "Exiting..."
    exit 130
  end
  main(ARGV)
end
